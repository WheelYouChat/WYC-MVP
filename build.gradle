buildscript {
  repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/"}
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.6.RELEASE")
  }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

jar {
  baseName = 'Telegram.Bot'
  version = '0.0.1'
}

bootRepackage {
    mainClass = 'com.cynteka.telegram.Application'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
}


dependencies {
  compile 'org.projectlombok:lombok:1.16.6'
  compile("org.springframework.boot:spring-boot-starter")
  compile("org.springframework:spring-jdbc")
  // JPA Data (We are going to use Repositories, Entities, Hibernate, etc...)
  compile 'org.springframework.boot:spring-boot-starter-data-jpa'
  // compile("org.springframework.boot:spring-boot-starter-data-rest")
  // compile 'org.springframework.data:spring-data-rest-hal-browser'
  
  compile("org.springframework.boot:spring-boot-starter-web") {
    exclude module: "spring-boot-starter-tomcat"
  }
  
  compile("org.springframework.boot:spring-boot-starter-jetty")
  compile("org.springframework.boot:spring-boot-starter-actuator")
    
  // Use MySQL Connector-J
  compile 'mysql:mysql-connector-java'
  compile 'org.postgresql:postgresql'
      
  // https://mvnrepository.com/artifact/org.telegram/telegrambots
  compile group: 'org.telegram', name: 'telegrambots', version: '3.5'
  
  // https://mvnrepository.com/artifact/org.apache.commons/commons-text
  compile group: 'org.apache.commons', name: 'commons-text', version: '1.1'
  
  
  // https://mvnrepository.com/artifact/org.hibernate/hibernate-validator
  compile group: 'org.hibernate', name: 'hibernate-validator', version: '5.4.1.Final'

  // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
  compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.8.1'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
  compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.2'
  
  // https://mvnrepository.com/artifact/org.telegram/telegramapi
  compile group: 'org.telegram', name: 'telegramapi', version: '66.2'

    // https://mvnrepository.com/artifact/org.modelmapper/modelmapper
  compile group: 'org.modelmapper', name: 'modelmapper', version: '1.1.2'
  
  compile group: "com.twilio.sdk", name: "twilio", version: "7.17.+"
  
// https://mvnrepository.com/artifact/com.telesign/telesign
  compile group: 'com.telesign', name: 'telesign', version: '2.2.0'
  // compile 'com.telesign.rest:telesign:2.2.0'
  
  // https://mvnrepository.com/artifact/junit/junit
  testCompile group: 'junit', name: 'junit', version: '4.12'
}


eclipse {
  classpath {
    // containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
    // containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
  }
}

// Таски для старта viber webhook- их задача только слушать viber webhook порт и регистрировать сообщения из viber
task viberwebhook1 <<{
	bootRun { systemProperty "spring.profiles.active", "viberwebhook1" }
}
viberwebhook1.finalizedBy bootRun

task viberwebhook2 <<{
	bootRun { systemProperty "spring.profiles.active", "viberwebhook2" }
}
viberwebhook2.finalizedBy bootRun

// Таска- основа бота- она орабатывает сообщения
task bot <<{
	bootRun { systemProperty "spring.profiles.active", "bot" }
}
bot.finalizedBy bootRun

// Таска для web ответов
task web <<{
	bootRun { systemProperty "spring.profiles.active", "web" }
}
web.finalizedBy bootRun

// Таска все в одном для разработки
task allinone <<{
	bootRun { systemProperty "spring.profiles.active", "allinone" }
}
allinone.finalizedBy bootRun
